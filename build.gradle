apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'com.google.protobuf'
apply plugin: 'application'

buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    // ASSUMES GRADLE 2.12 OR HIGHER. Use plugin version 0.7.5 with earlier
    // gradle versions
    classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.0'
  }
}

group = 'org.eclipse.che.examples'
version = '1.0-SNAPSHOT'
description = """grpc-client-server-demo"""

sourceCompatibility = 1.8
targetCompatibility = 1.8

//Fix
//CreateStartScripts `jar.outputs.files + project.configurations.runtime` adds `lib` to path.
//Seems hardcoded solution. Need to figure out how they are generated.
project.libsDirName = 'libs/lib'

repositories {
  mavenCentral()
  mavenLocal()
}

def grpcVersion = '1.3.0' 

dependencies {
  compile "io.grpc:grpc-netty:${grpcVersion}"
  compile "io.grpc:grpc-protobuf:${grpcVersion}"
  compile "io.grpc:grpc-stub:${grpcVersion}"

  testCompile "junit:junit:4.11"
  testCompile "org.mockito:mockito-core:1.9.5"
}

apply plugin: 'idea'

idea {
  module {
    // Not using generatedSourceDirs because of
    // https://discuss.gradle.org/t/support-for-intellij-2016/15294/8
    sourceDirs += file("${projectDir}/build/generated/source/proto/main/java");
    sourceDirs += file("${projectDir}/build/generated/source/proto/main/grpc");
  }
}

protobuf {
  protoc {
    artifact = 'com.google.protobuf:protoc:3.2.0'
  }
  plugins {
    grpc {
      artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
    }
  }
  generateProtoTasks {
    all()*.plugins {
      grpc {
        // To generate deprecated interfaces and static bindService method,
        // turn the enable_deprecated option to true below:
        option 'enable_deprecated=false'
      }
    }
  }
}

apply plugin: 'application'

startScripts {
    // Required but shouldn't be used.
    mainClassName = 'org.eclipse.che.examples.HelloWorldServer'
}

task helloWorldServer(type: CreateStartScripts) {
  defaultJvmOpts = ["-Dlogback.configurationFile=\$APP_CLASS_PATH/logback-hosting-extra.xml",
                    "-Dconfig=\$APP_CLASS_PATH/config.properties", "-Dapp.home=\$APP_CLASS_PATH/", "-Xms512m", "-Xmx1024m"]
  mainClassName = 'org.eclipse.che.examples.HelloWorldServer'
  applicationName = 'hello-world-server'
  outputDir = new File(project.buildDir, 'scripts')
  classpath = jar.outputs.files + project.configurations.runtime  
  doLast {
        // Will allow user to run script from directory not relative to class path.
        unixScript.text = unixScript.text.replace('\$APP_HOME', '\$APP_CLASS_PATH')
        windowsScript.text = windowsScript.text.replace('%~dp0', '%APP_CLASS_PATH%')
  }
}

task helloWorldClient(type: CreateStartScripts) {
  defaultJvmOpts = ["-Dlogback.configurationFile=\$APP_CLASS_PATH/logback-hosting-extra.xml",
                    "-Dconfig=\$APP_CLASS_PATH/config.properties", "-Dapp.home=\$APP_CLASS_PATH/", "-Xms512m", "-Xmx1024m"]
  mainClassName = 'org.eclipse.che.examples.HelloWorldClient'
  applicationName = 'hello-world-client'
  outputDir = new File(project.buildDir, 'scripts')
  classpath = jar.outputs.files + project.configurations.runtime  
  doLast {
        // Will allow user to run script from directory not relative to class path.
        unixScript.text = unixScript.text.replace('\$APP_HOME', '\$APP_CLASS_PATH')
        windowsScript.text = windowsScript.text.replace('%~dp0', '%APP_CLASS_PATH%')
  }
}

task copyCompileLibs(type: Copy) {
   into project.buildDir.absolutePath + "/libs/lib"
   from configurations.compile
}
helloWorldClient.dependsOn copyCompileLibs
  
applicationDistribution.into('bin') {
  from(helloWorldServer)
  from(helloWorldClient)
  fileMode = 0755
}



test {
    doLast {
        println 'running unit tests'
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
}

publishing {
    publications {
        mavenCustom(MavenPublication) {
            
            pom.withXml { 
                def nodeHold = asNode().appendNode('repositories')
                project.repositories.each {
                    def repo = nodeHold.appendNode('repository')
                    repo.appendNode('id',it.name)
                    repo.appendNode('url',it.url)
                }
            }
            pom.withXml {
                def deps = asNode().appendNode('dependencies')                
                configurations.compile.allDependencies.each{
                    def dep =  deps.appendNode('dependency')
                    dep.appendNode('groupId',it.group)
                    dep.appendNode('artifactId',it.name)
                    dep.appendNode('version',it.version)
                    dep.appendNode('scope',it.configuration)
                }
                //findComponent(project, 'InspectionProjectProfileManager')
            }
        }
    }
}

model {
    tasks.generatePomFileForMavenPublication {
        destination = file("pom.xml")
    }
    tasks.generatePomFileForMavenCustomPublication {
        destination = file("pom.xml")
    }
}


